import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;

class Solution {
    public String[] solution(String[] record) {
		StringTokenizer tokenizer = null;
		String cmd, id, nick = null;
		HashMap<String, String> idMap = new HashMap<>();
		for (String r : record) {
			tokenizer = new StringTokenizer(r, " ");
			cmd = tokenizer.nextToken();
			if(cmd.equals("Leave")) {
                continue;
			} else {
                id = tokenizer.nextToken();
				nick = tokenizer.nextToken();
				idMap.put(id, nick);
            }
		}		
		ArrayList<String> answer = new ArrayList<>();
		for (String r : record) {
			tokenizer = new StringTokenizer(r, " ");
			cmd = tokenizer.nextToken();
			if(cmd.equals("Change")) {
                continue;
            } else {
				id = tokenizer.nextToken();
				answer.add(new StringBuilder()
								.append(idMap.get(id))
								.append("Enter".equals(cmd) ? "님이 들어왔습니다." : "님이 나갔습니다.")
								.toString());
			}
		}
		return answer.toArray(new String[answer.size()]);
    }
}

code3 :
- 넉넉한 선언
- if+continue
테스트 1 〉	통과 (1.89ms, 50.7MB)
테스트 2 〉	통과 (1.92ms, 52.2MB)
테스트 3 〉	통과 (2.26ms, 50.5MB)
테스트 4 〉	통과 (2.26ms, 52.5MB)
테스트 5 〉	통과 (17.83ms, 53.4MB)
테스트 6 〉	통과 (12.51ms, 55.2MB)
테스트 7 〉	통과 (11.26ms, 54.9MB)
테스트 8 〉	통과 (9.78ms, 55.3MB)
테스트 9 〉	통과 (13.48ms, 55MB)
테스트 10 〉	통과 (11.89ms, 53.5MB)
테스트 11 〉	통과 (10.59ms, 52.9MB)
테스트 12 〉	통과 (7.95ms, 52.9MB)
테스트 13 〉	통과 (12.40ms, 55MB)
테스트 14 〉	통과 (12.50ms, 53.6MB)
테스트 15 〉	통과 (2.07ms, 53MB)
테스트 16 〉	통과 (2.02ms, 52.2MB)
테스트 17 〉	통과 (3.08ms, 52.1MB)
테스트 18 〉	통과 (3.10ms, 52.3MB)
테스트 19 〉	통과 (13.03ms, 55.4MB)
테스트 20 〉	통과 (10.65ms, 54.7MB)
테스트 21 〉	통과 (8.27ms, 57.2MB)
테스트 22 〉	통과 (10.29ms, 53.3MB)
테스트 23 〉	통과 (13.37ms, 54.7MB)
테스트 24 〉	통과 (13.67ms, 55.4MB)
테스트 25 〉	통과 (184.22ms, 152MB)
테스트 26 〉	통과 (207.26ms, 151MB)
테스트 27 〉	통과 (246.20ms, 162MB)
테스트 28 〉	통과 (251.16ms, 168MB)
테스트 29 〉	통과 (271.60ms, 166MB)
테스트 30 〉	통과 (207.83ms, 154MB)
테스트 31 〉	통과 (263.72ms, 159MB)
테스트 32 〉	통과 (213.95ms, 152MB)