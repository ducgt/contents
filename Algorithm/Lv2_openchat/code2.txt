import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;

class Solution {
    public String[] solution(String[] record) {
		StringTokenizer tokenizer = null;
		String cmd = null;
		HashMap<String, String> idMap = new HashMap<>();
		for (String r : record) {
			tokenizer = new StringTokenizer(r, " ");
			cmd = tokenizer.nextToken();
			if(!cmd.equals("Leave")) {
				idMap.put(tokenizer.nextToken(), tokenizer.nextToken());
			}
		}		
		ArrayList<String> answer = new ArrayList<>();
		for (String r : record) {
			tokenizer = new StringTokenizer(r, " ");
			cmd = tokenizer.nextToken();
			if(!cmd.equals("Change")) {
				answer.add(new StringBuilder()
								.append(idMap.get(tokenizer.nextToken()))
								.append("Enter".equals(cmd) ? "님이 들어왔습니다." : "님이 나갔습니다.")
								.toString());
			}
		}
		return answer.toArray(new String[answer.size()]);
    }
}

code2
: 빠듯한 선언
: if not
테스트 1 〉	통과 (1.60ms, 52.6MB)
테스트 2 〉	통과 (2.18ms, 52MB)
테스트 3 〉	통과 (2.49ms, 50.7MB)
테스트 4 〉	통과 (2.38ms, 52.4MB)
테스트 5 〉	통과 (10.78ms, 52.9MB)
테스트 6 〉	통과 (10.17ms, 55.3MB)
테스트 7 〉	통과 (11.19ms, 55.8MB)
테스트 8 〉	통과 (10.22ms, 54.9MB)
테스트 9 〉	통과 (13.56ms, 55.3MB)
테스트 10 〉	통과 (12.10ms, 51.2MB)
테스트 11 〉	통과 (7.46ms, 50.6MB)
테스트 12 〉	통과 (7.92ms, 50.5MB)
테스트 13 〉	통과 (11.88ms, 55.6MB)
테스트 14 〉	통과 (13.93ms, 53MB)
테스트 15 〉	통과 (1.97ms, 52.3MB)
테스트 16 〉	통과 (2.11ms, 52MB)
테스트 17 〉	통과 (3.17ms, 52.4MB)
테스트 18 〉	통과 (3.06ms, 50.8MB)
테스트 19 〉	통과 (11.98ms, 55.2MB)
테스트 20 〉	통과 (8.99ms, 52.9MB)
테스트 21 〉	통과 (10.53ms, 54.9MB)
테스트 22 〉	통과 (9.50ms, 53.6MB)
테스트 23 〉	통과 (12.19ms, 53.5MB)
테스트 24 〉	통과 (11.29ms, 53.4MB)
테스트 25 〉	통과 (217.10ms, 155MB)
테스트 26 〉	통과 (245.77ms, 155MB)
테스트 27 〉	통과 (230.95ms, 157MB)
테스트 28 〉	통과 (245.36ms, 166MB)
테스트 29 〉	통과 (259.60ms, 167MB)
테스트 30 〉	통과 (287.15ms, 151MB)
테스트 31 〉	통과 (261.59ms, 157MB)
테스트 32 〉	통과 (219.82ms, 155MB)