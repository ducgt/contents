import java.util.ArrayList;
import java.util.HashMap;
import java.util.StringTokenizer;

class Solution {
    public String[] solution(String[] record) {
		StringTokenizer tokenizer = null;
		String cmd = null;
		HashMap<String, String> idMap = new HashMap<>();
		for (String r : record) {
			tokenizer = new StringTokenizer(r, " ");
			cmd = tokenizer.nextToken();
			if(cmd.equals("Leave")) {
                continue;
			} else {
				idMap.put(tokenizer.nextToken(), tokenizer.nextToken());
            }
		}		
		ArrayList<String> answer = new ArrayList<>();
		for (String r : record) {
			tokenizer = new StringTokenizer(r, " ");
			cmd = tokenizer.nextToken();
			if(cmd.equals("Change")) {
                continue;
            } else {
				answer.add(new StringBuilder()
								.append(idMap.get(tokenizer.nextToken()))
								.append("Enter".equals(cmd) ? "님이 들어왔습니다." : "님이 나갔습니다.")
								.toString());
			}
		}
		return answer.toArray(new String[answer.size()]);
    }
}

code4 :
- 빠듯한 선언
- if+continue
테스트 1 〉	통과 (1.73ms, 52.3MB)
테스트 2 〉	통과 (1.88ms, 52.4MB)
테스트 3 〉	통과 (2.20ms, 52.2MB)
테스트 4 〉	통과 (2.57ms, 53.1MB)
테스트 5 〉	통과 (10.72ms, 53.5MB)
테스트 6 〉	통과 (11.56ms, 53.2MB)
테스트 7 〉	통과 (11.78ms, 55.4MB)
테스트 8 〉	통과 (11.29ms, 54.9MB)
테스트 9 〉	통과 (12.57ms, 55.5MB)
테스트 10 〉	통과 (10.60ms, 53.1MB)
테스트 11 〉	통과 (7.85ms, 53.2MB)
테스트 12 〉	통과 (7.57ms, 54.7MB)
테스트 13 〉	통과 (15.03ms, 55MB)
테스트 14 〉	통과 (11.86ms, 55.3MB)
테스트 15 〉	통과 (1.93ms, 52.3MB)
테스트 16 〉	통과 (1.77ms, 50.6MB)
테스트 17 〉	통과 (3.16ms, 52.7MB)
테스트 18 〉	통과 (2.99ms, 50.2MB)
테스트 19 〉	통과 (12.66ms, 55.2MB)
테스트 20 〉	통과 (11.37ms, 53MB)
테스트 21 〉	통과 (18.51ms, 55.3MB)
테스트 22 〉	통과 (11.15ms, 54.9MB)
테스트 23 〉	통과 (14.77ms, 53.2MB)
테스트 24 〉	통과 (12.16ms, 53.5MB)
테스트 25 〉	통과 (179.31ms, 146MB)
테스트 26 〉	통과 (220.61ms, 154MB)
테스트 27 〉	통과 (235.76ms, 155MB)
테스트 28 〉	통과 (255.97ms, 163MB)
테스트 29 〉	통과 (255.38ms, 164MB)
테스트 30 〉	통과 (220.38ms, 156MB)
테스트 31 〉	통과 (257.28ms, 162MB)
테스트 32 〉	통과 (203.95ms, 151MB)